// Extends sys_Array with:
// * Amortized insertions
// * iterations
// * producer-style assignments
class sys_Array{
    itemsCount = 0;

    size() int { itemsCount }

    each((sys_Object)void handler) {
        i = 0;
        loop!{
            i < itemsCount ? {
                sys_Array_getAt(this, i) ? handler(_);
                i := i + 1
            }
        }
    }
    plow((sys_Object)bool filter) {
        i = 0;
        loop!{
            i < itemsCount ? {
                sys_Array_getAt(this, i) && filter(_)
                    ? { i := i + 1; }
                    : deleteAt(i);
            }
        }
    }
    deleteAt(int i) {
        sys_Array_setAt(this, i, ?sys_Object);
        sys_Container_move(this, i, i + 1, itemsCount);
        itemsCount := itemsCount - 1;
    }
    push(int n, (int)?@sys_Object generator) {
        itemsCount + n >= sys_Container_size(this)
            ? sys_Container_insert(this, itemsCount, (itemsCount + n + 20) / 4);
        loop{
            sys_Array_setAt(this, itemsCount, generator(itemsCount));
            itemsCount := itemsCount + 1;
            (n := n - 1) == 0
        }
    }
    setAt(int i, ()@sys_Object generator) bool {
        i < itemsCount ? sys_Array_setAt(this, i, +generator())
    }
}

test insertIntoArray() {
    a = sys_Array;
    a.push(2, (i){ ?sys_Object });
    a.size() != 2 ? sys_terminate()
}
