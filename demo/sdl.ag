using sys { String; }
using sdlFfi;

//
// High level safe API
//
class Sdl {
    initVideo() bool {
        sdlFfi_sdlInit(0x7231) == 0 && // SDL_INIT_EVERYTHING
        sdlFfi_imgInit(3) != 0         // JPG, PNG
    }
    eventLoop((Event)void handler) {
        SdlQuit = 256;
        e = Event;
        loop{
            sdlFfi_pollEvent(e);
            handler(e);
            sdlFfi_delay(1000/30);
            e[0] == SdlQuit
        }
    }
}
fn disposeSdl(Sdl sdl) {
    sdlFfi_imgQuit();
    sdlFfi_sdlQuit();
}

class Window {
    handle = 0;
    renderer = 0;
    createCentered(String title, int w, int h) bool {
        destroyWindow(this);
        handle := sdlFfi_createWindow(title, 0x1FFF0000, 0x1FFF0000, w, h, 0);
        renderer := handle == 0 ? 0 : sdlFfi_createRenderer(handle, -1, 2); //2=SDL_RENDERER_ACCELERATED
        renderer != 0
    }
    fill(int color) {
        renderer != 0 ? {
            sdlFfi_setRendererDrawColor(renderer, color, color >> 8, color >> 16, color >> 24);
            sdlFfi_rendererClear(renderer)
        }
    }
    fillRect(int x, int y, int w, int h, int color) {
        renderer != 0 ? {
            sdlFfi_setRendererDrawColor(renderer, color, color >> 8, color >> 16, color >> 24);
            sdlFfi_rendererFillRect(renderer, x, y, w, h);
        }
    }
    blt(Texture tex, int sx, int sy, int sw, int sh, int dx, int dy, int dw, int dh){
        renderer != 0 && tex.id != 0 ?
            sdlFfi_blt(renderer, tex.id, sx, sy, sw, sh, dx, dy, dw, dh);
    }
    flip() {
        renderer != 0 ? sdlFfi_rendererPresent(renderer);
    }
}
fn destroyWindow(Window w) {
    w.renderer != 0 ? sdlFfi_destroyRenderer(w.renderer);
    w.handle != 0 ? sdlFfi_destroyWindow(w.handle);
}
fn afterCopyWindow(Window w) { w.handle := w.renderer := 0 }

class Event {
    +sys_Blob;
    getAt(int i) int { sys_get32At(this, i) }
}

class Texture{
    id = 0;
    init(Window wnd, String fileName) bool {
        wnd.renderer != 0 && {
            surface = sdlFfi_imgLoad(fileName);
            surface != 0 && {
                disposeTexture(this);
                id := sdlFfi_createTextureFromSurface(wnd.renderer, surface);
                sdlFfi_freeSurface(surface);
                id != 0
            }
        }
    }
    setAlphaMod(int multiplier) {
        id != 0 ? sdlFfi_setTextureAlphaMod(id, multiplier);
    }
    setColorMod(int color) {
        id != 0 ? sdlFfi_setTextureColorMod(id, color);
    }
}
fn disposeTexture(Texture t) {
    t.id != 0 ? sdlFfi_destroyTexture(t.id)
}
